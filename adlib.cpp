#include <math.h>
#include <memory.h>

typedef unsigned char 	uint8;
typedef signed char		int8;
typedef unsigned short	uint16;
typedef signed short	int16;
typedef unsigned int 	uint32;
typedef signed int		int32;

#define NUM_VOICES				15
#define NUM_MELODIC_VOICES		6		// channels 0-5	(1 voice each)
#define NUM_PERCUSSIONS			5		// channels 6 (1 voice), 7-8 (2 voices each)

struct Voice {
	uint8 program;		// why program again?
	uint8 volume;
	uint8 field_2;
} voices[NUM_VOICES];

struct MelodicVoice {
	int8 key;			// the note being played
	int8 program;		// the midi instrument? (see voice)
	int8 channel;		// the hardware channel
	int32 timestamp;
	int16 fnumber;		// frequency id (see lookup table)
	int8 octave;
	bool in_use;
} melodic[NUM_MELODIC_VOICES];

// notes being currently played for each percussion (0xFF if none)
uint8 notes_per_percussion[NUM_PERCUSSIONS];


// (almost) static info about notes played by percussions
// fields with _2 are used only by the bass drum (2 operators)
struct PercussionNotes {
	uint8 characteristic;	// amplitude modulation, vibrato, envelope, keyboard scaling, modulator frequency
	uint8 characteristic_2;
	uint8 levels;
	uint8 levels_2;
	uint8 attack_decay;
	uint8 attack_decay_2;
	uint8 sustain_release;
	uint8 sustain_release_2;
	uint8 waveform;
	uint8 waveform_2;
	uint8 feedback_algo;	// only used by the bass drum
	uint8 field_B;
	uint8 field_C;
	uint8 field_D;
	uint8 field_E;
	uint8 field_F;
	uint8 percussion;
	uint8 field_11;
	uint16 fnumber;
	uint8 octave;
	uint8 field_15;
	uint8 field_16;
	uint8 field_17;
	uint8 field_18;
	uint8 field_19;
	uint8 field_1A;
	uint8 field_1B;
	uint8 field_1C;
	uint8 field_1D;
	uint8 field_1E;
	uint8 field_1F;
};

struct MelodicProgram {
	uint8 characteristic;	// amplitude modulation, vibrato, envelope, keyboard scaling, modulator frequency
	uint8 characteristic_2;
	uint8 levels;
	uint8 levels_2;
	uint8 attack_decay;
	uint8 attack_decay_2;
	uint8 sustain_release;
	uint8 sustain_release_2;
	uint8 waveform;
	uint8 waveform_2;
	uint8 both_operators;
	uint8 field_B;
	uint8 field_C;
	uint8 field_D;
};

uint8 driver_percussion_mask;

enum DriverStatus {
	kStatusStopped,
	kStatusPlaying,
	kStatusPaused
};

DriverStatus driver_status;
bool driver_installed;

uint32 midi_buffer_pos;

uint16 midi_division;	// in ppqn
uint16 midi_event_delta;
uint8  midi_event_type, last_midi_event_type;
uint8  midi_tempo;
uint8  midi_event_channel;
uint8  midi_onoff_note;
uint8  midi_onoff_velocity;
int16 midi_pitch_bend;
uint8 midi_fade_volume_change_rate;

int32 driver_timestamp;
uint8 driver_assigned_voice;

// set by the client
uint32 midi_buffer_size;
bool midi_loop;
uint8 midi_volume;	// coarse volume
bool midi_fade_out_flag;
bool midi_fade_in_flag;


// fade in
bool driver_fading_in;
uint32 fadein_volume_cur;
uint32 fadein_volume_inc;

// fade out
bool driver_fading_out;
uint32 fadeout_volume_cur;
uint32 fadeout_volume_dec;

uint32 driver_lin_volume[128];
uint32 ADLIB_log_volume[129];

// internal fine volume
uint16 full_volume;

#define COARSE_VOL(x)	((x)>>8)
#define FINE_VOL(x)		((x)<<8)

/**********************************
	prototypes
*/

// midi driver
uint8 read_midi_byte();
uint16 read_midi_word();
uint32 read_midi_VLQ();
void midi_fadeout_and_stop();
void midi_stop();
void midi_pause();
void midi_resume();
void midi_set_tempo();
void process_midi_meta_event();
void process_midi_channel_event();
void process_meta_tempo_event();

// timers

void set_hw_timer(uint16 clock);
void reset_hw_timer();

// OPL
void ADLIB_play_melodic_note(uint8 voice);
void ADLIB_mute_melodic_voice(uint8 voice);
void ADLIB_program_melodic_voice(uint8 voice, uint8 program);
void ADLIB_turn_on_melodic();
void ADLIB_play_percussion();
void ADLIB_setup_percussion(uint8 percussion_number, uint8 note);
void ADLIB_turn_on_percussion();
void ADLIB_turn_on_voice();
void ADLIB_turn_off_percussion();
void ADLIB_turn_off_voice();
void ADLIB_init_voices();
void ADLIB_mute_voices();
void ADLIB_out(uint8 command, uint8 value);

/**********************************
	static data
*/


// struct size = 14
MelodicProgram melodic_programs[58] = {
	{  0x1, 0x11, 0x51,  0x0, 0xf2, 0xf2, 0xb2, 0xa2,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xc2, 0xd2, 0x4b,  0x0, 0xf1, 0xf2, 0x53, 0x74,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0 },
	{ 0x81, 0x13, 0x9d,  0x0, 0xf2, 0xf2, 0x74, 0xf1,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0 },
	{  0x3, 0x17, 0x4f,  0x3, 0xf1, 0xf2, 0x53, 0x74,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0 },
	{ 0xd1, 0xd4, 0x81,  0x0, 0x81, 0xe1, 0x73, 0x34,  0x2,  0x0,  0x3,  0x0,  0x0,  0x0 },
	{  0x1,  0x2,  0x0,  0x0, 0x94, 0x83, 0xa6, 0x26,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0 },
	{ 0xf3, 0x55, 0x84, 0x80, 0x81, 0xdd,  0x2,  0x3,  0x1,  0x0,  0x4,  0x0,  0x0,  0x0 },
	{  0x5,  0x1, 0x8a, 0x80, 0xf2, 0xf3, 0x26, 0x48,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x32, 0x12,  0x0,  0x0, 0xb1, 0xfd, 0x14, 0x36,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0 },
	{  0x1,  0x2,  0x0,  0x0, 0x82, 0x85,  0xa, 0x15,  0x2,  0x0,  0x3,  0x0,  0x0,  0x0 },
	{ 0xd1,  0x4,  0x1,  0xd, 0x97, 0xf3, 0xaa, 0xa5,  0x0,  0x1,  0x9,  0x0,  0x0,  0x0 },
	{ 0x17, 0x12,  0x0,  0x0, 0xf2, 0xf2, 0x62, 0x72,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0 },
	{  0x6, 0xc4,  0x0,  0x0, 0xff, 0xf8, 0xf4, 0xb5,  0x0,  0x0,  0xe,  0x0,  0x0,  0x0 },
	{ 0xc0, 0xc0, 0x81, 0xc1, 0xf2, 0xf3, 0x13, 0x14,  0x2,  0x2,  0xb,  0x0,  0x0,  0x0 },
	{ 0x44, 0x60, 0x53, 0x80, 0xf5, 0xfd, 0x31, 0x22,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0 },
	{ 0xe0, 0x61, 0x80,  0x0, 0xf4, 0xf2, 0xf2,  0x6,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0 },
	{ 0xc1, 0xc1,  0x6,  0x4, 0x83, 0xf0, 0x23, 0x26,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0 },
	{ 0x26, 0x21,  0x0,  0x0, 0xf4, 0x81, 0xb6, 0x4b,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0 },
	{ 0x24, 0x21, 0x80, 0x80, 0xff, 0xff,  0xf,  0xf,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0 },
	{ 0x24, 0x31, 0x4f,  0x0, 0xf2, 0x52,  0xb,  0xb,  0x0,  0x0,  0xb,  0x0,  0x0,  0x0 },
	{ 0x31, 0xa1,  0x8, 0x80, 0x81, 0x92,  0xb, 0x3b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x70, 0x71, 0xc5, 0x80, 0x52, 0x31, 0x11, 0xfe,  0x1,  0x1,  0x0,  0x0,  0x0,  0x0 },
	{ 0x51, 0x42, 0x88, 0x83, 0x10, 0x40, 0xf0, 0xfc,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0 },
	{ 0xf0, 0xb1, 0xd9, 0x80, 0x81, 0xf1,  0x3,  0x5,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0 },
	{ 0x21,  0x2, 0x4f, 0x80, 0xf1, 0xc3, 0x31, 0x45,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x7,  0x1, 0x8f, 0x80, 0x9c, 0x8a, 0x33, 0x13,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x21,  0x6, 0x40, 0x80, 0xf1, 0xf4, 0x31, 0x44,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x21, 0x81, 0x40,  0x0, 0xf1, 0xf4, 0x31, 0x44,  0x3,  0x2,  0x2,  0x0,  0x0,  0x0 },
	{ 0x11, 0x11, 0x8d, 0x80, 0xfd, 0xfd, 0x11, 0x11,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0 },
	{ 0xf0, 0x21,  0x1,  0xd, 0x97, 0xf1, 0x17, 0x18,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0 },
	{ 0xf1, 0x21,  0x1,  0xd, 0x97, 0xf1, 0x17, 0x18,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0 },
	{ 0xcd, 0xd1, 0x9e,  0x0, 0x55, 0xf2, 0xd1, 0x71,  0x0,  0x0,  0xe,  0x0,  0x0,  0x0 },
	{  0x1,  0x1,  0x0,  0x0, 0xf2, 0xf5, 0x88, 0x88,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0 },
	{ 0x30, 0x21,  0xd,  0x0, 0xf2, 0xf5, 0xef, 0x78,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0 },
	{  0x0,  0x0, 0x10,  0x0, 0xf4, 0xf5, 0xd9, 0xd7,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0 },
	{  0x1,  0x1, 0x4c, 0x40, 0xf2, 0xd2, 0x50, 0x59,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0 },
	{ 0x20, 0x20, 0x11,  0x0, 0xe2, 0xe4, 0x8a, 0xa8,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0 },
	{ 0x21, 0x21, 0x40,  0x0, 0x7b, 0x75,  0x4, 0x72,  0x1,  0x0,  0x2,  0x0,  0x0,  0x0 },
	{ 0x31, 0x21,  0xd,  0x0, 0xf2, 0xf5, 0xef, 0x78,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0 },
	{  0x1,  0x0,  0xc, 0x80, 0xf5, 0xf5, 0x2f, 0x5c,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xb0, 0x20, 0x1c,  0x0, 0x81, 0x54,  0x3, 0x67,  0x2,  0x2,  0xe,  0x0,  0x0,  0x0 },
	{  0x1,  0x1,  0x0, 0x80, 0xf1, 0xa3, 0x65, 0xa8,  0x0,  0x2,  0x1,  0x0,  0x0,  0x0 },
	{ 0xe1, 0x21, 0x4f,  0x0, 0xc1, 0x32, 0xd3, 0x74,  0x2,  0x1,  0x0,  0x0,  0x0,  0x0 },
	{  0x2, 0x12,  0x0,  0x0, 0xf6, 0xf2, 0x16, 0xf8,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0 },
	{ 0xe0, 0x70, 0x63, 0x80, 0xf8, 0xf7, 0xf3, 0xf3,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0 },
	{  0x1,  0x8,  0x6,  0x0, 0xf3, 0xf7, 0xff, 0xff,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0 },
	{ 0x21, 0x22, 0x16,  0x0, 0xb0, 0xb3, 0x81, 0x13,  0x1,  0x1,  0xc,  0x0,  0x0,  0x0 },
	{  0x1, 0x30, 0x4f,  0x0, 0xf0, 0x90, 0xff,  0xf,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0 },
	{  0x0,  0x1, 0x10,  0x0, 0xf1, 0xf1, 0xf2, 0xf2,  0x2,  0x3,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0x21, 0x4f, 0x80, 0xf1, 0xa3, 0x50,  0x5,  0x0,  0x3,  0x6,  0x0,  0x0,  0x0 },
	{ 0xb1, 0xb1,  0x3,  0x3, 0x55,  0x8,  0x3,  0xa,  0x0,  0x0,  0x9,  0x0,  0x0,  0x0 },
	{ 0x22,  0x1,  0x0,  0x0, 0xa9, 0xa2, 0x34, 0x42,  0x1,  0x2,  0x2,  0x0,  0x0,  0x0 },
	{ 0xa0, 0xb1, 0xdc, 0x80, 0x81, 0xf1, 0x31,  0x1,  0x3,  0x3,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0x21, 0x4f, 0x80, 0xf1, 0xa3, 0x50,  0x5,  0x0,  0x3,  0x6,  0x0,  0x0,  0x0 },
	{ 0xf1, 0x74, 0x80,  0x0, 0xa0, 0x90, 0x72, 0x22,  0x0,  0x0,  0x9,  0x0,  0x0,  0x0 },
	{ 0xe1, 0xe1, 0x13,  0x0, 0x71, 0xf0, 0xae, 0xfc,  0x0,  0x1,  0xa,  0x0,  0x0,  0x0 },
	{ 0x31, 0xa1, 0x1c, 0x80, 0x41, 0x92,  0xb, 0x3b,  0x0,  0x0,  0xe,  0x0,  0x0,  0x0 },
	{ 0x71, 0xa1, 0x1c, 0x80, 0x41, 0x92, 0x1f, 0x3b,  0x0,  0x0,  0xe,  0x0,  0x0,  0x0 }
};



// struct size = 32
PercussionNotes percussion_notes[82] = {
	{ 0x21, 0xa1, 0x1c, 0x80, 0x53, 0x52, 0x1d, 0x3b,  0x0,  0x0,  0xc,  0x0,  0x0,  0x0,  0x0,  0x0, 0x21, 0x21,   0x1d, 0xa4, 0xb1, 0xae, 0x9e,  0x1,  0x0,  0xc,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xe1, 0xe1, 0x16,  0x0, 0x71, 0x81, 0xae, 0x9e,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0, 0xe1, 0xe2,   0x15, 0x71, 0x81, 0xae, 0x9e,  0x0,  0x0,  0xe,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x21, 0x21, 0x16,  0x0, 0x71, 0x81, 0xae, 0x9e,  0x0,  0x0,  0xe,  0x0,  0x0,  0x0,  0x0,  0x0, 0x71, 0xa1, 0x801c, 0x41, 0x92, 0x1f, 0x3b,  0x0,  0x0,  0xe,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x21, 0x32, 0x4f,  0x0, 0x81, 0x22, 0x53, 0x2c,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0, 0x22, 0x32,   0x4f, 0x81, 0x22, 0x53, 0x2c,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x23, 0x34, 0x4f,  0x0, 0x81, 0x22, 0x53, 0x2c,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0, 0xe1, 0xe1,   0x16, 0x71, 0x81, 0xae, 0x9e,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x71, 0x22, 0xc5,  0x5, 0x6e, 0x8b, 0x17,  0xe,  0x0,  0x0,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0, 0xe6, 0xe3,   0x27, 0x70, 0x60,  0xf, 0x9f,  0x1,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x30, 0xb1, 0xc8, 0x80, 0xd5, 0x61, 0x19, 0x1b,  0x0,  0x0,  0xc,  0x0,  0x0,  0x0,  0x0,  0x0, 0x32, 0xa1, 0x829a, 0x51, 0xa2, 0x1b, 0x3b,  0x0,  0x0,  0xc,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xad, 0xa2,  0x3, 0x82, 0x74, 0x73, 0x29, 0x29,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0, 0x21, 0x62, 0x8d83, 0x74, 0x65, 0x17, 0x17,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x94, 0x13,  0xb,  0x0, 0x85, 0x74, 0xff, 0xff,  0x1,  0x0,  0xc,  0x0,  0x0,  0x0,  0x0,  0x0, 0x74, 0xd6, 0x8087, 0xa4, 0x45,  0x2, 0x42,  0x0,  0x0,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xb3, 0x20, 0x85,  0x0, 0x76, 0x3d, 0x21, 0xc1,  0x1,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0, 0x17, 0x12,  0x84f, 0xf2, 0xf1, 0x61, 0xb4,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x4f, 0x1f, 0x86,  0x0, 0x65, 0x32,  0x1, 0x74,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0, 0xe1, 0xe4,   0x23, 0x71, 0x82, 0xae, 0x9e,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x11,  0x4, 0x86, 0x80, 0xf2, 0xa0, 0xbd, 0x9b,  0x0,  0x1,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0, 0x20, 0x11,   0x90, 0xf5, 0xf4, 0x9e, 0x5b,  0x2,  0x3,  0xc,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xf0, 0x7e, 0x80,  0x0, 0x34, 0xa2, 0xe4,  0x6,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0, 0x90,  0x0,    0xf, 0xff, 0x1f,  0x1,  0x1,  0x3,  0x0,  0xe,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0x33, 0x4f,  0x0, 0xf0, 0x90, 0xff,  0xf,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0, 0x1e, 0x10,    0x0, 0x1f, 0x1f,  0xf, 0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xbe, 0x31,  0x0,  0x0, 0xf1, 0xf1,  0x1,  0x1,  0x3,  0x0,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0, 0xbe, 0x31,    0x0, 0xf1, 0xf1,  0x1,  0x1,  0x3,  0x0,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x93, 0x82,  0x6,  0x0, 0xc1, 0x51,  0x4,  0x9,  0x1,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0, 0xa0, 0x20,    0x0, 0x96, 0x55, 0x33, 0x2b,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0, 0xc0,  0x0, 0xff, 0xff,  0x5,  0x5,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4,  0x1,    0x8, 0xf8, 0x82,  0x7, 0x74,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0, 0x20,  0x0,  0x0, 0x2f, 0xff,  0x5,  0x5,  0x0,  0x3,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0, 0x93,  0x0,    0x0, 0xf7, 0xf7,  0x7,  0x7,  0x2,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0, 0xc4, 0x40,  0x0, 0x80, 0xc0, 0x7a, 0x7e,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0, 0x90,  0x0,   0x80, 0x55, 0x55, 0xf5, 0xf5,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xe1, 0x69, 0x80,  0x0, 0x34, 0xf2, 0xe4,  0x6,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3, 0x11, 0x8002, 0xf0, 0xf0, 0xff, 0xff,  0x3,  0x2,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x1e, 0x10,  0x0,  0x0, 0x1f, 0x1f,  0xf, 0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,    0x0, 0x2f, 0xff,  0x1,  0x1,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xbe, 0x31,  0x0,  0x0, 0xf1, 0xf1,  0x1,  0x1,  0x3,  0x0,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0, 0x93,  0x0,   0x85, 0x3f, 0x5f,  0x6,  0x7,  0x1,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x6, 0x44,  0x0,  0x0, 0xa0, 0xc5, 0xf0, 0x75,  0x0,  0x0,  0xe,  0x0,  0x0,  0x0,  0x0,  0x0, 0x60, 0x20, 0x8c00, 0x10, 0x12, 0x81, 0x91,  0x0,  0x0,  0xe,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1,  0x8, 0x40, 0x40, 0xf1, 0xf1, 0x53, 0x53,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0x31, 0x16,    0x0, 0x56, 0x7d, 0x31, 0x41,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0, 0x13, 0x10,  0x0, 0xf2, 0xf2, 0x72, 0x72,  0x0,  0x0,  0xc,  0x0,  0x0,  0x0,  0x0,  0x0, 0x10,  0x1,    0x0, 0x75, 0xf5, 0x93, 0x82,  0x1,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0, 0xf6, 0xf6, 0xff, 0xff,  0x2,  0x0,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0, 0x30, 0x63,    0x0, 0xff, 0x65, 0xa0,  0xb,  0x3,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x2a, 0x2b,  0x0,  0x0, 0xf6, 0x76, 0x87, 0x25,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0x85, 0x43,    0x0, 0xb8, 0xe5, 0x84, 0x8f,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x7, 0x12, 0x4f,  0x0, 0xf2, 0xf2, 0x60, 0x72,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5, 0x86, 0x8040, 0xb3, 0xf2, 0xd3, 0x24,  0x0,  0x0,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xd0, 0xd1,  0x0,  0x0, 0x11, 0xf4, 0xcf, 0xe8,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5,  0x1,   0x4e, 0xda, 0xf9, 0x25, 0x15,  0x2,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x3,  0x2,  0x0,  0x0, 0x8f, 0xff,  0x7,  0x6,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0x13,  0x2,    0x0, 0x8f, 0xf9,  0x7,  0x5,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xf0, 0x21,  0x1,  0xd, 0x97, 0xf1, 0x17, 0x18,  0x0,  0x0,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0, 0xf1, 0xf1, 0x4141, 0x11, 0x11, 0x11, 0x11,  0x0,  0x0,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0x13,  0x2,  0x0,  0x0, 0x8f, 0xff,  0x7,  0x6,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x1,    0x0, 0x2f, 0xaf,  0x1,  0x1,  0x0,  0x3,  0xf,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1,  0x8,  0x6,  0x0, 0xf3, 0xf7, 0xff, 0xff,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0, 0xc0, 0xbe,  0xc4f, 0xf1, 0x10,  0x3,  0x1,  0x0,  0x0,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0, 0x11,  0x2, 0x80, 0xf0, 0xf0, 0xff, 0xff,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0, 0x81, 0xa2,  0x447, 0xf1, 0x91, 0x83, 0x86,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xf0, 0xe5, 0xc0,  0x0, 0xff, 0xfb, 0xff, 0xf0,  0x3,  0x0,  0xe,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0x11, 0x8002, 0xf0, 0xf0, 0xff, 0xff,  0x0,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0xb,  0x0, 0xa8, 0xd6, 0x38, 0x49,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4,  0x1,   0x97,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xc0, 0xc0, 0xc0,  0x0, 0xf8, 0xf6, 0x3f, 0x8e,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4,  0x1,   0xf7,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{ 0xc0, 0xeb, 0x80, 0x40, 0xc9, 0xb5, 0xab, 0xf6,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3,  0x1,   0x6a,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0xc,  0x0,  0x0,  0x0, 0xd8, 0xd6, 0xa6, 0x4f,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3,  0x1,   0x6c,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1,  0x3,  0x0, 0x41, 0xe2, 0x8f, 0xd2, 0x48,  0x0, 0x49,  0xc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4,  0x1,   0x2f,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0, 0xc8, 0xf6, 0x58, 0x4f,  0x3,  0x0,  0x9,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3,  0x1,  0x108,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0xf2,  0x0, 0xff, 0xff, 0xe0,  0x5, 0x50,  0x0, 0x52, 0x5d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x1,   0x9f,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0xe, 0xeb,  0x9, 0x40, 0xb9, 0xf5, 0x47, 0xe6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,   0x82,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0, 0xd6,  0x0, 0xd7, 0xd6, 0xe0, 0x83, 0x41,  0x0, 0x5e, 0x4a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x1,   0xc7,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0xd6,  0x9, 0xd7, 0x89, 0xe0, 0x67, 0x41,  0x0, 0x5e, 0x4a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,   0x80,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0xd6,  0x0, 0xd7, 0xd6, 0xe0, 0x96, 0x41,  0x0, 0x5e, 0x4a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x1,   0xed,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x9,  0x0, 0xa9,  0x0, 0x55,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,   0x82,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x2, 0xe0,  0x0,  0x0, 0xc6, 0xe0, 0x96, 0x40,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x1,  0x123,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x5, 0xf7,  0x0, 0xff, 0xf6, 0xb3, 0x56, 0x90,  0x0, 0x4f,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x1,  0x15b,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0xf7,  0x0, 0xff, 0xf7, 0x36, 0x14, 0x90,  0x0, 0x79, 0xe7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x1,  0x1ac,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0, 0xf6,  0x0, 0x56,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x1,  0x18b,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0, 0xf7, 0x83, 0x41, 0xfb, 0x39,  0x5, 0x90,  0x0, 0x79,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x1,   0xc8,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0, 0xf7,  0x0, 0xff, 0xff, 0x36,  0x5, 0x90,  0x0, 0x79, 0xe7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x1,   0xf9,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1,  0x0,  0x0,  0x0, 0xa0,  0x0,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x1,  0x27a,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x5,  0x0, 0xf3,  0x0,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x1,  0x108,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0xf7,  0x0, 0xff, 0xf9, 0x36, 0x34, 0x90,  0x0, 0x79, 0xe7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x1,  0x147,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0, 0xf7,  0x0, 0x16,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0x1,  0x120,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0xf7,  0x0, 0xff, 0xff, 0x36,  0x5, 0x90,  0x0, 0x79, 0xe7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x1,   0x42,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x1, 0xf7,  0x0, 0xff, 0xff, 0x36,  0x5, 0x90,  0x0, 0x79, 0xe7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x1,   0x6d,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 },
	{  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fc,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0 }
};


uint8 operator_offsets_for_percussion[] = {
	0x11, // hi-hat operator 		[channel 7, operator 1]
	0x15, // cymbal operator		[channel 8, operator 2]
	0x12, // tom tom operator		[channel 8, operator 1]
	0x14  // snare drum operator	[channel 7, operator 1]
//  0x10  // bass drum				[channel 6, operator 1]
//  0x13  // bass drum				[channel 6, operator 2]
};


uint8 operator1_offset_for_melodic[9] = {
	 0x0,  0x1,  0x2,  0x8,  0x9,  0xa, 0x10, 0x11, 0x12
};

uint8 operator2_offset_for_melodic[9] = {
	 0x3,  0x4,  0x5,  0xb,  0xc,  0xd, 0x13, 0x14, 0x15
};

uint16 melodic_fnumbers[36] = {
	 0x55,   0x5a,   0x60,   0x66,   0x6c,   0x72,   0x79,   0x80,   0x88,   
	 0x90,   0x99,   0xa1,   0xab,   0xb5,   0xc0,   0xcc,   0xd8,   0xe5,   
	 0xf2,  0x101,  0x110,  0x120,  0x132,  0x143,  0x156,  0x16b,  0x181,  
	0x198,  0x1b0,  0x1ca,  0x1e5,  0x202,  0x220,  0x241,  0x263,  0x286
};





/**********************************
	msc-midi driver
*/

void midi_driver() {
	while (true) {

		if (!driver_installed) {
			return;
		}
		if (driver_status != kStatusPlaying) {
			return;
		}
		
		if (midi_buffer_pos < midi_buffer_size) {
			// playback
			if (driver_fading_in) {
				if (full_volume > COARSE_VOL(fadein_volume_cur)) {
					fadein_volume_cur += fadein_volume_inc;
					midi_volume = COARSE_VOL(fadein_volume_cur);
				} else {
					driver_fading_in = false;
					midi_volume = full_volume;
					break;	//return
				}
			}
			
			if (driver_fading_out) {
				if (0 < COARSE_VOL(fadeout_volume_cur)) {
					fadeout_volume_cur -= fadeout_volume_dec;
					midi_volume = COARSE_VOL(fadeout_volume_cur);
				} else {
					driver_fading_out = false;
					midi_volume = full_volume;
					midi_fade_out_flag = false;	// needed to force stopping
					midi_fadeout_and_stop();
					midi_fade_out_flag = true;	// reset the flag
					break;	//return
				}			
			}
			
			driver_timestamp++;
			
			if (midi_event_delta != 0) {
				midi_event_delta--;
				break; // return
			}

			if (midi_event_type == 255) {
				process_midi_meta_event();
				midi_event_delta = read_midi_word();
				midi_event_type = read_midi_byte();			
			} else {
				if ((midi_event_type & 0x80) == 0) {
					// repeat the last event
					midi_buffer_pos--;
					midi_event_type = last_midi_event_type;
				}
			
				process_midi_channel_event();
				last_midi_event_type = midi_event_type;
				midi_event_delta = read_midi_word();
				midi_event_type = read_midi_byte();				
			}

		} else {
			// end-of-file
			if (midi_loop) {
				// loop the file from the beginning
				midi_buffer_pos = 7;	// skip signature and a couple of fields
				midi_event_delta = read_midi_word();
				midi_event_type = read_midi_byte();
			} else {
				midi_stop();
				break;	// return
			}
		}
	}
}

void midi_fadeout_and_stop() {
	if (!driver_installed) {
		return;
	}
	if (driver_status == kStatusStopped) {
		return;
	}

	if (midi_fade_out_flag && !driver_fading_out) {
		// start a fadeout
		driver_fading_out = true;
		full_volume = midi_volume;
		fadeout_volume_dec = FINE_VOL(midi_volume) / (midi_fade_volume_change_rate * midi_division);
		fadeout_volume_cur = FINE_VOL(midi_volume);
	} else {
		midi_stop();
	}
}

void midi_stop() {
	ADLIB_mute_voices();
	reset_hw_timer();	// restore the previous timer frequency
	driver_status = kStatusStopped;
}

void midi_pause() {
	if (!driver_installed) {
		return;
	}
	ADLIB_mute_voices();
	reset_hw_timer();
	driver_status = kStatusPaused;
}

void midi_resume() {
	if (!driver_installed) {
		return;
	}
	if (driver_status != kStatusPaused) {
		ADLIB_init_voices();
		driver_assigned_voice = 0;
		midi_buffer_pos = 4;	// skip signature
		midi_tempo = read_midi_byte();
		midi_division = read_midi_word();
		if (midi_division > 255) {
			midi_division = 192;
		}
		
		midi_event_delta = read_midi_word();
		midi_event_type = read_midi_byte();
		last_midi_event_type = 0;
		driver_timestamp = 0;
		
		ADLIB_out(0xBD, driver_percussion_mask);
		if (midi_fade_in_flag && !driver_fading_in) {
			// start a fade in
			full_volume = midi_volume;
			driver_fading_in = true;
			fadein_volume_inc = FINE_VOL(midi_volume) / (midi_fade_volume_change_rate * midi_division);
			fadein_volume_cur = 0;
		}
	}

	midi_set_tempo();
	driver_status = kStatusPlaying;
}

void midi_set_tempo() {
	uint16 word_13A3F = (midi_tempo * midi_division) / 60;
	set_hw_timer(word_13A3F);
}

void process_midi_meta_event() {
	uint8 type = read_midi_byte();
	uint8 length = read_midi_byte();

	if (type == 81) {	// tempo event
		process_meta_tempo_event();
	} else {
		// discard other meta events
		for (int i = 0; i < length; ++i) {
			read_midi_byte();
		}
	}
}

#define BYTE3(a,b,c) (((a) << 16) | ((b) << 8) | (c))

void process_meta_tempo_event() {
	uint8 v0 = read_midi_byte();
	uint8 v1 = read_midi_byte();
	uint8 v2 = read_midi_byte();
	
	midi_tempo = 60000000 / BYTE3(v0,v1,v2);
	midi_set_tempo();	
}

#define NOTE_KEY(note)			((note) & 0xFF)
#define NOTE_VEL(note)			(((note) >> 8) & 0xFF)
#define NOTEON_VEL(note)		((driver_lin_volume[midi_volume] * NOTE_VEL(note)) >> 8)

#define PITCH_BEND_THRESH		8192

void process_midi_channel_event() {
	midi_event_channel = midi_event_type & 0xF;
	uint8 event_type = midi_event_type >> 4;
	
	uint16 note_info;
	uint8 controller_number, controller_value;
	int16 bend_amount;
	
	switch (event_type) {
	case 9: // note on
		note_info = read_midi_word();
		midi_onoff_note = NOTE_KEY(note_info);
		midi_onoff_velocity = NOTEON_VEL(midi_onoff_note);
		ADLIB_turn_on_voice();
		break;	// return
		
	case 8: // note off
		note_info = read_midi_word();
		midi_onoff_note = NOTE_KEY(note_info);
		midi_onoff_velocity = NOTE_VEL(midi_onoff_note);
		ADLIB_turn_off_voice();
		break;	// return
	
	case 12:	// program change
		voices[midi_event_channel].program = read_midi_byte();
		break;	// return
		
	case 13:	// channel aftertouch
		read_midi_byte();	
		break;	// return		
	
	case 10:	// note aftertouch
		read_midi_word();	
		break;	// return		

	case 14:	// pitch bend
		// this should always read 2 bytes from the stream, so using VLQ might not be correct
		midi_pitch_bend = read_midi_VLQ() - PITCH_BEND_THRESH;	
		for (int i = 0; i < NUM_MELODIC_VOICES; ++i) {
			if (melodic[i].channel == midi_event_channel && melodic[i].in_use) {
				uint8 f = 12 + melodic[i].note % 12;	// index to fnumber
				if (midi_pitch_bend > 0) {
					// bend up two semitones
					bend_amount = (midi_pitch_bend * (melodic_fnumbers[f+2] - melodic_fnumbers[f])) / PITCH_BEND_THRESH;
				} else {
					// bend down two semitones
					bend_amount = (midi_pitch_bend * (melodic_fnumbers[f] - melodic_fnumbers[f-2])) / PITCH_BEND_THRESH;					
				}
				bend_amount += melodic_fnumbers[f];	// add the base frequency
				ADLIB_out(0xB0 + i, ADLIB_B0(1 << 5,melodic[i].octave<<2,bend_amount >> 8));
				ADLIB_out(0xA0 + i, bend_amount & 0xFF);
				melodic[i].timestamp = driver_timestamp;
			}
		}
		break;	
	
	case 11:	// controller
		controller_number = read_midi_byte();
		controller_value = read_midi_byte();
		
		switch (controller_number) {
		case 1:	// modulation
			if (controller_value >= 64) {
				driver_percussion_mask |= 0x80;
			} else {
				driver_percussion_mask &= 0x7F;	
			}
			ADLIB_out(0xBD, driver_percussion_mask);
			break;	// return		
			
		case 7: // main volume
			voices[midi_event_channel].volume = controller_value;
			break;	// return		
		
		case 4: // foot controller
			voices[midi_event_channel].field_2 = (controller_value >= 64);
			break;	// return					
			
		case 123: // all notes off
			ADLIB_mute_voices();
			break; // return
		}

		break;
	
	default:
		break;
	}
}

void midi_init() {
	ADLIB_out(0x1, 0x80);
	ADLIB_out(0x1, 0x20);
	
	// linear map [0..127] to [0..128] (user volume to driver volume?)
	const float k = 128.0f / 127.0f;
	for (int i = 0; i < 128; ++i) {
		driver_lin_volume[i] = (uint32)round(k * (float)i);
	}

	// logarithmic map [0 -> 0, 1..128 -> 1..256] (driver volume to hw volume?)
	for (int i = 0; i < 129; ++i) {
		ADLIB_log_volume[i] = (uint32)round(256.0f * (log((float)i+1.0f) / log(128.0f)));
	}
	
	for (int i = 0; i < 8; ++i) {
		ADLIB_out(0xA0 + i, 0);
		ADLIB_out(0xB0 + i, 0);
		ADLIB_out(0xC0 + i, 0);
	}

	ADLIB_out(0xBD, driver_percussion_mask);
	
	midi_buffer_pos = 4;
	midi_tempo = 120;
	midi_division = 192;
	midi_event_delta = 0;
	midi_event_type = 0;
	last_midi_event_type = 0;
	midi_fade_volume_change_rate = 0;
	midi_fade_out_flag = false;
	midi_fade_in_flag = false;
	driver_fading_out = false;
	driver_fading_in = false;
	midi_loop = false;
	driver_status = kStatusStopped;
	driver_assigned_voice = 0;
	driver_timestamp = 0;
	midi_volume = 127;
}


/**********************************
	low-level OPL manipulation
*/

/*
	bit 7 - Clear:  AM depth is 1 dB
	bit 6 - Clear:  Vibrato depth is 7 cent
	bit 5 - Set:    Rhythm enabled  (6 melodic voices)
	bit 4 - Bass drum off
	bit 3 - Snare drum off
	bit 2 - Tom tom off
	bit 1 - Cymbal off
	bit 0 - Hi Hat off
*/
#define ADLIB_DEFAULT_PERCUSSION_MASK	0x20

/*	
 *	bit  7-6: unused		
 *	bit   5 : key on (0 mutes voice)
 *	bits 4-2: octave
 *	bits 1-0: higher 2 bits of f-number
 */
#define ADLIB_B0(key_on,octave,fnumber) ( ((key_on) & 1) | ((octave) & 7) | ((fnumber)) & 3))

#define ADLIB_A0(fnumber) 		(fnumber)

#define ADLIB_40(scaling,total) ( ((scaling) & 0xC0) | ((total_level) & 0x3F) )

#define INC_MOD(n,max)		((n+1) % max)


// the maximum volume value in the hardware and its bitmask
#define MAXIMUM_LEVEL			63
#define LEVEL_MASK				0x3F		//	63

/* combines note, program and channel levels, then scales it down to fit the six bits available in
   the hardware. The result is subtracted from MAXIMUM_LEVEL as the hardware's logic is
   reversed. See http://www.shipbrook.com/jeff/sb.html#40-55.
 */
#define TOTAL_LEVEL(vel,prg)	(MAXIMUM_LEVEL - ((ADLIB_log_volume[vel] * ADLIB_log_volume[voices[midi_event_channel].volume] * (prg)) >> 16))

/* turn off all the voices and restore base octave and (hi) frequency */
void ADLIB_mute_voices() {
	// turn off melodic voices
	for (int i = 0; i < NUM_MELODIC_VOICES; ++i) {
		ADLIB_out(0xB0 + i, ADLIB_B0(0, melodic[i].octave << 2, melodic[i].fnumber >> 8));
	}
	
	// turn off percussions
	ADLIB_out(0xBD, ADLIB_DEFAULT_PERCUSSION_MASK);
}


void ADLIB_init_voices() {
	for (int i = 0; i < NUM_VOICES; ++i) {
		voices[i].program = 0;
		voices[i].volume = 127;
		voices[i].field_2 = 0;
	}
	
	for (int i = 0; i < NUM_MELODIC_VOICES; ++i) {
		melodic[i].key = -1;
		melodic[i].program = -1;
		melodic[i].channel = -1;
		melodic[i].timestamp = 0;
		melodic[i].fnumber = 0;
		melodic[i].octave = 0;
		melodic[i].in_use = false;
	}
	
	// clear out current percussion notes
	memset(notes_per_percussion, 5, 0xFF);
	
	driver_fading_in = false;
	driver_fading_out = false;
	driver_percussion_mask = ADLIB_DEFAULT_PERCUSSION_MASK;
}

void ADLIB_turn_off_voice() {
	if (midi_event_channel == 9) {
		ADLIB_turn_off_percussion();
	} else {
		uint8 voice;	// left uninitialized !
	
		if (voices[midi_channel_event].field_2 == 0) {
			voice = 0;
		}
		
		for (int i = 0; i < NUM_MELODIC_VOICES; ++i) {
			if (melodic[i].key == midi_onoff_note && melodic[i].channel == midi_event_channel) {
				voice = i;
			}
		}
		
		if (voice) {
			// mute the channel
			ADLIB_out(0xB0 + voice, ADLIB_B0(0, melodic[voice].octave << 2, melodic[voice].fnumber >> 8));
		}
	}
}

void ADLIB_turn_off_percussion() {
	driver_percussion_mask &= ~(1 << percussion_notes[midi_onoff_note].percussion);
}

void ADLIB_turn_on_voice() {
	if (midi_event_channel == 9) {
		if (midi_onoff_velocity == 0) {
			ADLIB_turn_off_percussion();
		} else {
			ADLIB_turn_on_percussion();		
		}
	} else {
		if (midi_onoff_velocity == 0) {
			ADLIB_turn_off_voice();
		} else {
			ADLIB_turn_on_melodic();		
		}	
	}	
}

void ADLIB_turn_on_percussion() {
	if (midi_onoff_note < 35 || midi_onoff_note > 81) {
		return;
	}
	if (percussion_notes[midi_onoff_note].field_11 == 0) {
		return;
	}
	
	if (midi_onoff_note != notes_per_percussion[percussion_notes[midi_onoff_note].percussion]) {
		ADLIB_setup_percussion(percussion_notes[midi_onoff_note].percussion, midi_onoff_note);
		notes_per_percussion[percussion_notes[midi_onoff_note].percussion] = midi_onoff_note;
	}
	
	ADLIB_play_percussion();
}

void ADLIB_setup_percussion(uint8 percussion_number, uint8 note) {
	if (percussion_number < 4) {
		// simple percussions (1 operator)
		driver_percussion_mask &= ~(1 << percussion_number);
		ADLIB_out(0xBD, driver_percussion_mask);
		
		uint8 offset = operator_offsets_for_percussion[percussion_number];		
		ADLIB_out(0x40 + offset, percussion_notes[note].levels & LEVEL_MASK);
		ADLIB_out(0x60 + offset, percussion_notes[note].attack_decay);
		ADLIB_out(0x80 + offset, percussion_notes[note].sustain_release);		
	} else {
		// bass drum (2 operators)
		driver_percussion_mask &= ~(0x10);
		ADLIB_out(0xBD, driver_percussion_mask);
		
		// first operator
		ADLIB_out(0x30, percussion_notes[note].characteristic);
		ADLIB_out(0x50, percussion_notes[note].levels);
		ADLIB_out(0x70, percussion_notes[note].attack_decay);
		ADLIB_out(0x90, percussion_notes[note].sustain_release);
		ADLIB_out(0xF0, percussion_notes[note].waveform);

		// second operator
		ADLIB_out(0x33, percussion_notes[note].characteristic_2);
		ADLIB_out(0x53, percussion_notes[note].levels_2);
		ADLIB_out(0x73, percussion_notes[note].attack_decay_2);
		ADLIB_out(0x93, percussion_notes[note].sustain_release_2);
		ADLIB_out(0xF3, percussion_notes[note].waveform_2);		
		
		// feedback / algorithm
		ADLIB_out(0xC6, percussion_notes[note].feedback_algo);
	}
}


void ADLIB_play_percussion() {
	uint8 percussion_number = percussion_notes[midi_onoff_note].percussion;
	if (percussion_number < 4) {
		// simple percussion (1 operator)
		driver_percussion_mask &= ~(1 << percussion_number);
		ADLIB_out(0xBD, driver_percussion_mask);
		
		uint8 offset = operator_offsets_for_percussion[percussion_number];		
		
		uint8 scaling_level = percussion_notes[midi_onoff_note].levels;
		uint8 total_level = TOTAL_LEVEL(midi_onoff_velocity, MAXIMUM_LEVEL);
		ADLIB_out(0x40 + offset, ADLIB_40(scaling_level, percussion_notes[midi_onoff_note].levels));
		
		if (percussion_number == 2) {
			// tom tom operator		[channel 8, operator 1]
			octave = percussion_notes[midi_onoff_note].octave << 2;
			fnumber = percussion_notes[midi_onoff_note].fnumber >> 8;
			ADLIB_out(0xB8, ADLIB_B0(0,octave,fnumber));
			ADLIB_out(0xA8, ADLIB_A0(percussion_notes[midi_onoff_note].fnumber & 0xFF));
		} else
		if (percussion_number == 3) {
			// snare drum operator	[channel 7, operator 1]
			octave = percussion_notes[midi_onoff_note].octave << 2;
			fnumber = percussion_notes[midi_onoff_note].fnumber >> 8;
			ADLIB_out(0xB7, ADLIB_B0(0,octave,fnumber));
			ADLIB_out(0xA7, ADLIB_A0(percussion_notes[midi_onoff_note].fnumber & 0xFF));
		}
		
		driver_percussion_mask |= (1 << percussion_number);
		ADLIB_out(0xBD, driver_percussion_mask);		
	} else {
		// bass drum (2 operators)
		driver_percussion_mask &= ~(0x10);
	
		if (percussions.feedback_algo[midi_onoff_note]) {
			// operator 2 is modulation operation 1	
			uint8 scaling_level = percussion_notes[midi_onoff_note].levels_2;
			uint8 total_level = TOTAL_LEVEL(midi_onoff_velocity, MAXIMUM_LEVEL);
			ADLIB_out(0x53, ADLIB_40(scaling_level, total_level));
		} else {
			// operators 1 and 2 are independent
			uint8 scaling_level = percussion_notes[midi_onoff_note].levels;
			uint8 total_level = TOTAL_LEVEL(midi_onoff_velocity, MAXIMUM_LEVEL);
			ADLIB_out(0x40 + offset, ADLIB_40(scaling_level, total_level);

			uint8 scaling_level = percussion_notes[midi_onoff_note].levels_2;
			uint8 total_level = TOTAL_LEVEL(midi_onoff_velocity, MAXIMUM_LEVEL);
			ADLIB_out(0x53, ADLIB_40(scaling_level, total_level));
		}
		
		octave = percussion_notes[midi_onoff_note].octave << 2;
		fnumber = percussion_notes[midi_onoff_note].fnumber >> 8;
		ADLIB_out(0xB6, ADLIB_B0(0,octave,fnumber));
		ADLIB_out(0xA6, ADLIB_A0(percussion_notes[midi_onoff_note].fnumber & 0xFF));

		driver_percussion_mask |= 0x10;
		ADLIB_out(0xBD, driver_percussion_mask);				
	}
}

void ADLIB_turn_on_melodic() {
	// ideal: look for a melodic voice playing the same note with the same program
	for (int i = 0; i < NUM_MELODIC_VOICES; ++i) {
		if (melodic[i].channel == midi_event_channel && 
			melodic[i].program == voices[midi_event_channel].program &&
			melodic[i].note == midi_onoff_note) {
			ADLIB_mute_melodic_voice(i);
			ADLIB_play_melodic_note(i);
			return;
		}
	}
	
	// fallback 1: look for a free melodic voice with the same program
	uint8 voice = driver_assigned_voice;
	do {
		driver_assigned_voice = INC_MOD(driver_assigned_voice, NUM_MELODIC_VOICES);
		
		if (!melodic[driver_assigned_voice].in_use) {	
			continue;
		}
		
		if (voices[midi_event_channel].program == melodic[driver_assigned_voice].program) {
			ADLIB_play_melodic_note(driver_assigned_voice);
			return;
		}
	} while (driver_assigned_voice != voice);

	// fallback 2: look for a free melodic voice
	do {
		driver_assigned_voice = INC_MOD(driver_assigned_voice, NUM_MELODIC_VOICES);
	
		if (!melodic[driver_assigned_voice].in_use) {	
			ADLIB_program_melodic_voice(driver_assigned_voice, voices[midi_event_channel].program);
			ADLIB_play_melodic_note(driver_assigned_voice);
			return;		
		}
	} while (voice != driver_assigned_voice);

	// last attempt: look for any voice with the same program
	driver_assigned_voice = voice;
	do {
		driver_assigned_voice = INC_MOD(driver_assigned_voice, NUM_MELODIC_VOICES);

		if (voices[midi_event_channel].program == melodic[driver_assigned_voice].program) {
			ADLIB_mute_melodic_voice(driver_assigned_voice);
			ADLIB_play_melodic_note(driver_assigned_voice);
			return;
		}
	} while (voice != driver_assigned_voice);	

	// forget the good manners and take possession of the voice with the oldest timestamp
	int32 min_timestamp = 0x7FFFFFFF;
	for (int i = 0; i < NUM_MELODIC_VOICES; ++i) {
		if (melodic[i].timestamp < min_timestamp) {
			min_timestamp = melodic[i].timestamp;
			driver_assigned_voice = i;
		}
	}
	ADLIB_program_melodic_voice(driver_assigned_voice, voices[midi_event_channel].program);
	ADLIB_play_melodic_note(driver_assigned_voice);
}

void ADLIB_program_melodic_voice(uint8 voice, uint8 program) {
	// the original decreases channel by one, but we are already counting from 0
	
	uint8 offset1 = operator1_offset_for_melodic[voice];
	uint8 offset2 = operator2_offset_for_melodic[voice];
	ADLIB_out(0x40 + offset1, MAXIMUM_LEVEL);
	ADLIB_out(0x40 + offset2, MAXIMUM_LEVEL);

	ADLIB_out(0xB0 + voice, ADLIB_B0(0, melodic[voice].octave << 2, melodic[voice].fnumber >> 8));

	ADLIB_out(0x20 + offset1, melodic_programs[program].characteristic);
	ADLIB_out(0x60 + offset1, melodic_programs[program].attack_decay);
	ADLIB_out(0x80 + offset1, melodic_programs[program].sustain_release);
	ADLIB_out(0xE0 + offset1, melodic_programs[program].waveform);
	ADLIB_out(0x40 + offset1, melodic_programs[program].levels);
	
	ADLIB_out(0x20 + offset2, melodic_programs[program].characteristic_2);
	ADLIB_out(0x60 + offset2, melodic_programs[program].attack_decay_2);
	ADLIB_out(0x80 + offset2, melodic_programs[program].sustain_release_2);
	ADLIB_out(0xE0 + offset2, melodic_programs[program].waveform_2);
	ADLIB_out(0x40 + offset2, melodic_programs[program].levels_2);
}

void ADLIB_mute_melodic_voice(uint8 voice) {
	ADLIB_out(0xB0 + voice, ADLIB_B0(0, melodic[voice].octave << 2, melodic[voice].fnumber >> 8));
}

void ADLIB_play_melodic_note(uint8 voice) {
	uint8 octave = midi_onoff_note / 12;
	uint8 fnumber = 12 + (midi_onoff_note % 12);
	if (octave > 7) {
		octave = 7;
	}
	
	uint8 program = voices[midi_event_channel].program;
	
	if (1 & melodic_programs[program].both_operators) {
		uint8 offset1 = operator1_offset_for_melodic[voice];
		uint8 scaling_level = melodic_programs[program].levels;
		uint8 program_level = MAXIMUM_LEVEL - (melodic_programs[program].levels & LEVEL_MASK);
		uint8 total_level = TOTAL_LEVEL(midi_onoff_velocity, program_level);		
		ADLIB_out(0x40 + offset1, ADLIB_40(scaling_level, total_level));

		uint8 offset2 = operator2_offset_for_melodic[voice];
		scaling_level = melodic_programs[program].levels_2;
		program_level = MAXIMUM_LEVEL - (melodic_programs[program].levels_2 & LEVEL_MASK);
		total_level = TOTAL_LEVEL(midi_onoff_velocity, program_level);		
		ADLIB_out(0x40 + offset2, ADLIB_40(scaling_level, total_level));
	} else {
		uint8 offset2 = operator2_offset_for_melodic[voice];
		uint8 scaling_level = melodic_programs[program].levels_2;
		uint8 total_level = TOTAL_LEVEL(midi_onoff_velocity, MAXIMUM_LEVEL);
		ADLIB_out(0x40 + offset2, ADLIB_40(scaling_level, total_level));
	}
	
	ADLIB_out(0xB0 + voice, ADLIB_B0(1 << 5,octave << 2,melodic_fnumbers[fnumber] >> 8);
	ADLIB_out(0xA0 + voice, melodic_fnumbers[fnumber] & 0xFF);

	melodic[voice].program = program;
	melodic[voice].note = midi_onoff_note;
	melodic[voice].channel = midi_event_channel;
	melodic[voice].timestamp = driver_timestamp;
	melodic[voice].fnumber = fnumber;
	melodic[voice].octave = octave;
	melodic[voice].in_use = true;
}